<?php

namespace unit\tests\Donations;

use Give\Donations\Models\Donation;
use Give\Donations\Repositories\DonationRepository;
use Give\Framework\Database\DB;
use Give\Framework\Database\Exceptions\DatabaseQueryException;
use Give\Framework\Models\Traits\InteractsWithTime;

final class DonationRepositoryTest extends \Give_Unit_Test_Case
{
    use InteractsWithTime;

    /**
     * @unreleased - truncate donationMetaTable to avoid duplicate records
     *
     * @return void
     */
    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        $donationMetaTable = DB::prefix('give_donationmeta');

        DB::query("TRUNCATE TABLE $donationMetaTable");
    }

    /**
     * @unreleased
     *
     * @return void
     *
     * @throws DatabaseQueryException
     */
    public function testGetByIdShouldReturnDonation()
    {
        $donationFactory = new Donation(50, 'USD', 1, 'Ante', 'LaÄ‡a', 'ante@givewp.com');
        $repository = new DonationRepository();

        $insertedDonation = $repository->insert($donationFactory);

        $donation = $repository->getById($insertedDonation->id);

        $this->assertInstanceOf(Donation::class, $donation);
        $this->assertEquals($insertedDonation->id, $donation->id);
    }

    /**
     * @unreleased
     *
     * @return void
     *
     * @throws DatabaseQueryException
     */
    public function testInsertShouldAddDonationToDatabase()
    {
        $donation = new Donation(50, 'USD', 1, 'Bill', 'Murray', 'billMurray@givewp.com');
        $repository = new DonationRepository();
        $donation->gateway = 'manual';

        $newDonation = $repository->insert($donation);

        $query = DB::table('posts')
            ->select('ID', 'post_date', 'post_modified', 'post_status', 'post_parent')
            ->attachMeta(
                'give_donationmeta',
                'ID',
                'donation_id',
                '_give_payment_total',
                '_give_payment_currency',
                '_give_payment_gateway',
                '_give_payment_donor_id',
                '_give_donor_billing_first_name',
                '_give_donor_billing_last_name',
                '_give_payment_donor_email',
                'subscription_id'
            )
            ->where('ID', $newDonation->id)
            ->get();


        // simulate asserting database has values
        $this->assertInstanceOf(Donation::class, $newDonation);
        $this->assertEquals($query->ID, $newDonation->id);
        $this->assertEquals($query->post_status, $newDonation->status->getValue());
        $this->assertEquals($query->_give_payment_total, $newDonation->amount);
        $this->assertEquals($query->_give_payment_currency, $newDonation->currency);
        $this->assertEquals($query->_give_payment_gateway, $newDonation->gateway);
        $this->assertEquals($query->_give_payment_donor_id, $newDonation->donorId);
        $this->assertEquals($query->_give_donor_billing_first_name, $newDonation->firstName);
        $this->assertEquals($query->_give_donor_billing_last_name, $newDonation->lastName);
        $this->assertEquals($query->_give_payment_donor_email, $newDonation->email);
        $this->assertEquals($this->toDateTime($query->post_date), $newDonation->createdAt);
        $this->assertEquals($this->toDateTime($query->post_modified), $newDonation->updatedAt);
        $this->assertEquals($query->post_parent, $newDonation->parentId);
    }
}
